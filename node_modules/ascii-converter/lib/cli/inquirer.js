"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.askFinalAction = exports.askDestinationPath = exports.askOptions = exports.askFile = void 0;
var fs_1 = require("fs");
var inquirer_1 = __importDefault(require("inquirer"));
var path_1 = require("path");
var options_1 = require("../options");
var files_1 = require("./files");
function askFile(choices) {
    return __awaiter(this, void 0, void 0, function () {
        var file, customFile;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    choices.push('[Choose another file]');
                    return [4 /*yield*/, inquirer_1.default.prompt({
                            name: 'file',
                            type: 'list',
                            choices: choices,
                            loop: false,
                            message: 'Select an image to convert:',
                        })];
                case 1:
                    file = (_a.sent()).file;
                    if (!(file === choices[choices.length - 1])) return [3 /*break*/, 3];
                    return [4 /*yield*/, inquirer_1.default.prompt({
                            type: 'input',
                            name: 'customFile',
                            message: 'Insert a custom file path:',
                            validate: function (s) {
                                return fs_1.existsSync(path_1.normalize(s.trim())) || "This file doesn't exist!";
                            },
                        })];
                case 2:
                    customFile = (_a.sent()).customFile;
                    file = customFile.trim();
                    _a.label = 3;
                case 3: return [2 /*return*/, file];
            }
        });
    });
}
exports.askFile = askFile;
var validateSize = function (minValue) { return function (str) {
    var num = Number(str);
    return (!isNaN(num) && num >= minValue) || 'Invalid number';
}; };
function askOptions(image) {
    return __awaiter(this, void 0, void 0, function () {
        var useCustom, questions, _a, spaceChars, grayScale, width, height;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, inquirer_1.default.prompt({
                        type: 'confirm',
                        name: 'useCustom',
                        message: 'Use custom conversion options?',
                    })];
                case 1:
                    useCustom = (_b.sent()).useCustom;
                    if (!useCustom)
                        return [2 /*return*/, undefined];
                    questions = [
                        {
                            name: 'spaceChars',
                            type: 'input',
                            message: 'Number of spaces to insert between characters:',
                            validate: validateSize(0),
                            default: options_1.defaultOptions.spaceChars,
                        },
                        {
                            name: 'grayScale',
                            type: 'input',
                            message: 'ASCII gray scale to use for conversion:',
                            validate: function (s) {
                                return s.length > 0 || 'Gray scale must be at least 1 character long';
                            },
                            default: options_1.defaultOptions.grayScale,
                        },
                        {
                            name: 'width',
                            type: 'input',
                            message: 'Width for resizing the image:',
                            validate: validateSize(1),
                            default: image.width,
                        },
                        {
                            name: 'height',
                            type: 'input',
                            message: 'Height for resizing the image:',
                            validate: validateSize(1),
                            default: image.height,
                        },
                    ];
                    return [4 /*yield*/, inquirer_1.default.prompt(questions)];
                case 2:
                    _a = _b.sent(), spaceChars = _a.spaceChars, grayScale = _a.grayScale, width = _a.width, height = _a.height;
                    return [2 /*return*/, {
                            spaceChars: Number(spaceChars),
                            grayScale: grayScale,
                            width: Number(width),
                            height: Number(height),
                        }];
            }
        });
    });
}
exports.askOptions = askOptions;
function askDestinationPath(defaultPath) {
    return __awaiter(this, void 0, void 0, function () {
        var path;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, inquirer_1.default.prompt({
                        type: 'input',
                        name: 'path',
                        message: 'Insert the file path:',
                        default: defaultPath,
                        validate: function (s) { return s.trim().length > 0 || 'Invalid file path!'; },
                    })];
                case 1:
                    path = (_a.sent()).path;
                    return [2 /*return*/, path_1.normalize(path.trim())];
            }
        });
    });
}
exports.askDestinationPath = askDestinationPath;
function askFinalAction(ascii, filename) {
    return __awaiter(this, void 0, void 0, function () {
        var choices, action, _a, fontSize;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    choices = ['An HTML document', 'A text file'];
                    return [4 /*yield*/, inquirer_1.default.prompt({
                            name: 'action',
                            message: 'Choose where to save the result:',
                            type: 'list',
                            choices: choices,
                        })];
                case 1:
                    action = (_b.sent()).action;
                    _a = choices.indexOf(action);
                    switch (_a) {
                        case 0: return [3 /*break*/, 2];
                        case 1: return [3 /*break*/, 5];
                    }
                    return [3 /*break*/, 7];
                case 2: return [4 /*yield*/, inquirer_1.default.prompt({
                        type: 'input',
                        name: 'fontSize',
                        message: "Insert the document's font size:",
                        validate: function (s) { return s.trim().length > 0 || 'Invalid font size'; },
                        default: '3',
                    })];
                case 3:
                    fontSize = (_b.sent()).fontSize;
                    return [4 /*yield*/, files_1.writeTemplate(ascii, filename, fontSize.trim())];
                case 4: return [2 /*return*/, _b.sent()];
                case 5: return [4 /*yield*/, files_1.writeTextFile(ascii)];
                case 6: 
                // Text file
                return [2 /*return*/, _b.sent()];
                case 7: throw new Error('Invalid final action provided');
            }
        });
    });
}
exports.askFinalAction = askFinalAction;
