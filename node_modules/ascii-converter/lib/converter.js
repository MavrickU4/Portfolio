"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var canvas_1 = require("canvas");
var options_1 = require("./options");
/**
 * Converts the given image path or buffer
 * to an ASCII text string.
 * @param src The image path or buffer
 * @param options Options for the image conversion
 * @returns A promise that, when fulfilled, returns the image as ASCII text.
 */
function convertToASCII(src, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var image, _a, grayScale, spaceChars, _b, width, _c, height, canvas, ctx, data, pixels, rows, i, text;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0: return [4 /*yield*/, canvas_1.loadImage(src)];
                case 1:
                    image = _d.sent();
                    _a = __assign(__assign({}, options_1.defaultOptions), options), grayScale = _a.grayScale, spaceChars = _a.spaceChars, _b = _a.width, width = _b === void 0 ? image.width : _b, _c = _a.height, height = _c === void 0 ? image.height : _c;
                    // Validate options
                    width = Math.max(width, 1);
                    height = Math.max(height, 1);
                    grayScale = grayScale || ' .:-=+*#%@';
                    spaceChars = Math.max(spaceChars, 0);
                    canvas = canvas_1.createCanvas(width, height);
                    ctx = canvas.getContext('2d');
                    // Draw image on canvas
                    ctx.drawImage(image, 0, 0, width, height);
                    data = ctx.getImageData(0, 0, width, height).data;
                    pixels = data.reduce(function (acc, val, index) {
                        var pos = index % 4; // Position in RGBA
                        if (pos === 0) {
                            // Case R
                            acc.push(val);
                        }
                        else if (pos === 3) {
                            // Case A
                            acc[acc.length - 1] /= 255 * 3;
                            acc[acc.length - 1] *= val / 255;
                        }
                        else {
                            // Case GB
                            acc[acc.length - 1] += val;
                        }
                        return acc;
                    }, []);
                    rows = [];
                    for (i = 0; i < pixels.length; i += width) {
                        rows.push(pixels.slice(i, i + width));
                    }
                    text = rows
                        .map(function (row) {
                        return row
                            .map(function (value) { return grayScale[Math.round(value * (grayScale.length - 1))]; })
                            .join(' '.repeat(spaceChars));
                    })
                        .join('\n');
                    return [2 /*return*/, text];
            }
        });
    });
}
exports.default = convertToASCII;
